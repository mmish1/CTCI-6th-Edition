/*Q5.1) Insertion: You are given two 32-bit numbers, N and M, and two bit positions, i and j.
		Write a method to insert M into N such that M starts at bit j and ends at bit i. You 
		can assume that the bits j through i have enough space to fit all of M. That is, 
		if M = 10011, you can assume that there are at least 5 bits between j and i. You would 
		not, for example, have j = 3 and i = 2, because M could not fully fit between bit 3 and bit 2. 
		EXAMPLE Input: N 10000000000, M = 10011, i=2, j=6
				Output: N = 10001001100 */

#include<iostream>

using namespace std;

void toDecimal(long num){
	long rem=num%2;
	if(num==0) {
		return;
	}
	toDecimal(num/2);
	cout<<rem;
}

void insertion(long M, long &N, int i, int j){
	long leftMask=(1<<i)&-1;
	long rightMask=-1<<(j+1);
	long mask=leftMask | rightMask;
	long clearedN= N&mask; // bits i to j cleared in N
	N = clearedN | (M<<i);
}

main(){
	long M,N;
	int i=2,j=6;
	cout<<"Enter M and N respectively: ";
	cin>>M;
	cin.ignore(1,' ');
	cin>>N;
	cin.ignore(1,' ');
	cout<<"\nM = ";
	toDecimal(M);
	cout<<"\nN = ";
	toDecimal(N);
	cout<<"\nEnter the start and end position respectively: ";
	cin>>i;
	cin.ignore(1,' ');
	cin>>j;
	
	insertion(M,N,i,j);
	cout<<"\nThe inserted value is N = ";
	toDecimal(N);
	return 0;
}
