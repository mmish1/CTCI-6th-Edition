/*Q4.7) Build Order: You are given a list of projects and a list of dependencies (which is 
		a list of pairs of projects, where the second project is dependent on the first 
		project). All of a project's dependencies must be built before the project is. Find 
		a build order that will allow the projects to be built. If there is no valid build order, 
		return an error. 
		EXAMPLE 
			Input: projects: a, b, c, d, e, f 
			dependencies: (a, d), (f, b), (b, d), (f, a), (d, c) 
			Output: f, e, a, b, d, c*/

#include<iostream>
#include<stack>
#include<vector>

using namespace std;

class Graph{
	int v;
	vector<int> *adj;
	public:
	Graph(int a){
		v=a;
		adj=new vector<int>[v];
	}
	
	void addEdge(int src, int dest){
		adj[src].push_back(dest);
	}
	
	void buildOrderHelper(int i, bool *visited, stack<int> &s){
		visited[i]=true;
		
		for(int it=0; it<adj[i].size();it++){
			if(!visited[adj[i][it]]) {
				buildOrderHelper(adj[i][it],visited, s);
			}
		}
		s.push(i);
	}
	
	void buildOrder(){
		stack<int> s;
		
		bool visited[v];
		for(int i=0;i<v;i++) visited[i]=false;
		
		for(int i=0;i<v;i++){
			if(visited[i]==false){
				
				buildOrderHelper(i,&visited[0],s);
			}
		}
		
		
		while(!s.empty()){
			cout<<s.top()<<" ";
			s.pop();
		}
	}
	
	void dispAdj(){
		for(int i=0;i<v;i++){
			for(int j=0;j<adj[i].size();j++){
				cout<<i<<":"<<adj[i][j]<<" ";
			}
			cout<<endl;
		}
	}
};

main(){
	Graph g(6);
	
	g.addEdge(0, 3);
	g.addEdge(5, 1);
	g.addEdge(5, 0);
	g.addEdge(1, 3);
	g.addEdge(3, 2);	
	
	g.buildOrder();
	
	return 0;
}
